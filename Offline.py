import customtkinter as ctk
import pandas as pd
import joblib
import pyttsx3
import serial
import re
import time
from tkinter import messagebox
from threading import Thread

# ========== CONFIGURATION ==========
SERIAL_PORT = "COM3"     # Change as per your system
BAUD_RATE = 9600
USE_HINDI_VOICE = True    # Auto speak result in Hindi
# ===================================

# UI settings
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("green")

# Load model and data
model = joblib.load("crop_model.pkl")
df = pd.read_csv("synthetic_crop_dataset_with_info.csv")

eng_descriptions = df.drop_duplicates("label").set_index("label")["description"].to_dict()
hindi_descriptions = {
    "Rice": "‡§ö‡§æ‡§µ‡§≤ ‡§ï‡•ã ‡§ó‡§∞‡•ç‡§Æ ‡§î‡§∞ ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞ ‡§ú‡§≤‡§µ‡§æ‡§Ø‡•Å ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§ ‡§™‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§Ö‡§ß‡§ø‡§ï ‡§ö‡§æ‡§π‡§ø‡§è‡•§",
    "Wheat": "‡§ó‡•á‡§π‡•Ç‡§Ç ‡§†‡§Ç‡§°‡•á ‡§î‡§∞ ‡§∂‡•Å‡§∑‡•ç‡§ï ‡§Æ‡•å‡§∏‡§Æ ‡§Æ‡•á‡§Ç ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§â‡§ó‡§§‡§æ ‡§π‡•à‡•§",
    "Maize": "‡§Æ‡§ï‡•ç‡§ï‡§æ ‡§ï‡•ã ‡§ó‡§∞‡•ç‡§Æ ‡§ú‡§≤‡§µ‡§æ‡§Ø‡•Å ‡§î‡§∞ ‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§®‡§Æ‡•Ä ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§",
    "Sugarcane": "‡§ó‡§®‡•ç‡§®‡§æ ‡§â‡§∑‡•ç‡§£‡§ï‡§ü‡§ø‡§¨‡§Ç‡§ß‡•Ä‡§Ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§â‡§ö‡•ç‡§ö ‡§®‡§Æ‡•Ä ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§",
    "Cotton": "‡§ï‡§™‡§æ‡§∏ ‡§∏‡•Ç‡§ñ‡•á ‡§î‡§∞ ‡§ó‡§∞‡•ç‡§Æ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§¨‡•á‡§π‡§§‡§∞ ‡§â‡§ó‡§§‡§æ ‡§π‡•à‡•§",
    "Barley": "‡§ú‡•å ‡§†‡§Ç‡§°‡•Ä ‡§î‡§∞ ‡§∂‡•Å‡§∑‡•ç‡§ï ‡§ú‡§≤‡§µ‡§æ‡§Ø‡•Å ‡§Æ‡•á‡§Ç ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§",
    "Millets": "‡§¨‡§æ‡§ú‡§∞‡§æ ‡§∏‡•Ç‡§ñ‡§æ-‡§∏‡§π‡§ø‡§∑‡•ç‡§£‡•Å ‡§π‡•à ‡§î‡§∞ ‡§ï‡§Æ ‡§™‡§æ‡§®‡•Ä ‡§Æ‡•á‡§Ç ‡§≠‡•Ä ‡§â‡§ó‡§§‡§æ ‡§π‡•à‡•§",
    "Groundnut": "‡§Æ‡•Ç‡§Ç‡§ó‡§´‡§≤‡•Ä ‡§ï‡•ã ‡§ó‡§∞‡•ç‡§Æ ‡§î‡§∞ ‡§®‡§Æ ‡§ú‡§≤‡§µ‡§æ‡§Ø‡•Å ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§",
    "Soybean": "‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§® ‡§ï‡•ã ‡§ó‡§∞‡•ç‡§Æ ‡§î‡§∞ ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞ ‡§µ‡§æ‡§§‡§æ‡§µ‡§∞‡§£ ‡§™‡§∏‡§Ç‡§¶ ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§",
    "Lentil": "‡§Æ‡§∏‡•Ç‡§∞ ‡§†‡§Ç‡§°‡•á ‡§î‡§∞ ‡§∂‡•Å‡§∑‡•ç‡§ï ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§π‡•à‡•§"
}

# Text-to-Speech engine
engine = pyttsx3.init()
engine.setProperty('rate', 145)

# Speak function
def speak(text):
    engine.say(text)
    engine.runAndWait()

# Crop prediction function
def predict_crop(temp, hum, moist):
    try:
        prediction = model.predict([[temp, hum, moist]])[0]

        desc_en = eng_descriptions.get(prediction, "No description available.")
        desc_hi = hindi_descriptions.get(prediction, "‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§")

        result_text = f"üåæ Recommended Crop: {prediction}\n\nüìò Description:\n{desc_en}\n\nü™î ‡§π‡§ø‡§Ç‡§¶‡•Ä:\n{desc_hi}"
        result_label.configure(text_color="lightgreen")
        result_label.configure(text=result_text)

        if USE_HINDI_VOICE:
            Thread(target=lambda: speak(desc_hi)).start()

    except Exception as e:
        result_label.configure(text=f"‚ùå Error in prediction: {e}")

# Serial reader thread
def read_from_arduino():
    try:
        ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=2)
        time.sleep(2)
        while True:
            line = ser.readline().decode().strip()
            match = re.search(r"TEMP:(\d+\.?\d*),HUM:(\d+\.?\d*),SOIL:(\d+)", line)
            if match:
                temp = float(match.group(1))
                hum = float(match.group(2))
                moist = int(match.group(3))

                temp_entry.delete(0, "end")
                hum_entry.delete(0, "end")
                moist_entry.delete(0, "end")

                temp_entry.insert(0, str(temp))
                hum_entry.insert(0, str(hum))
                moist_entry.insert(0, str(moist))

                predict_crop(temp, hum, moist)
                time.sleep(10)  # Wait before next prediction
    except Exception as e:
        result_label.configure(text=f"‚ùå Serial Error: {e}")

# GUI Setup
app = ctk.CTk()
app.geometry("600x580")
app.title("üåæ AI Crop Recommendation System (Auto from Arduino)")
app.resizable(False, False)

title_label = ctk.CTkLabel(app, text="üåø Smart Farming Assistant", font=ctk.CTkFont(size=24, weight="bold"))
title_label.pack(pady=15)

input_frame = ctk.CTkFrame(app, corner_radius=12)
input_frame.pack(pady=10, padx=20, fill="x")

temp_entry = ctk.CTkEntry(input_frame, placeholder_text="üå° Temperature (¬∞C)", height=40)
temp_entry.pack(pady=10, padx=20, fill="x")

hum_entry = ctk.CTkEntry(input_frame, placeholder_text="üíß Humidity (%)", height=40)
hum_entry.pack(pady=10, padx=20, fill="x")

moist_entry = ctk.CTkEntry(input_frame, placeholder_text="üå± Soil Moisture (%)", height=40)
moist_entry.pack(pady=10, padx=20, fill="x")

# Result Label
result_label = ctk.CTkLabel(app, text="Waiting for Arduino data...", wraplength=550, justify="left", font=ctk.CTkFont(size=14))
result_label.pack(pady=20, padx=20)

# Start Arduino thread
Thread(target=read_from_arduino, daemon=True).start()

# Run app
app.mainloop()
